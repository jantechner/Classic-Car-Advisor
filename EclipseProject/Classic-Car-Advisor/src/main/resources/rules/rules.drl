package com.drools.example
import java.util.ArrayList

import com.drools.example.controllers.QuestionViewController
import com.drools.example.UserAnswer
import com.drools.example.Question
import com.drools.example.Car
import java.util.ArrayList
import java.util.Arrays
import org.kie.api.task.model.User



rule "Init"
    when
    then
    System.out.println("Init rule fired - first question added");

    ArrayList<UserAnswer> answers = new ArrayList<>();
    answers.add(new UserAnswer("Reliability and convenience bore me"));
    answers.add(new UserAnswer("I guess I'm making some kind of statement about something?"));
    answers.add(new UserAnswer("New cars have no soul"));
    answers.add(new UserAnswer("I prefer the style"));
    answers.add(new UserAnswer("Love speed, hate safety"));

    insert(new Question("Why do you want a classic?", answers, new ArrayList<Car>()));
end


rule "Show question with possible answers"
    when
        q : Question();
        guiController : QuestionViewController();
    then
        guiController.updateQuestion(q);
end


// Reliability and convenience bore me - branch 1/5

rule "Why do you want a classic? - Reliability and convenience bore me"
    when
        q : Question(content == "Why do you want a classic?");
        a : UserAnswer(content == "Reliability and convenience bore me");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("I want to know how cars work"));
        answers.add(new UserAnswer("I'm erotically drawn to tow trucks and freeway shoulders"));
        retract(a)
        retract(q)
        insert(new Question("Oh yeah? Why's that?", answers, new ArrayList<Car>()));
end

rule "Oh yeah? Why's that? - I'm erotically drawn to tow trucks and freeway shoulders"    when
        q : Question(content == "Oh yeah? Why's that?");
        a : UserAnswer(content == "I'm erotically drawn to tow trucks and freeway shoulders");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Also really lovely"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Lotus Elan"));
        retract(a)
        retract(q)
        insert(new Question("Ok. Should it be pretty quick?", answers, cars));
end

rule "Ok. Should it be pretty quick? - Also really lovely"
    when
        q : Question(content == "Ok. Should it be pretty quick?");
        a : UserAnswer(content == "Also really lovely");
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Alfa Romeo Giulia Super"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Oh yeah? Why's that? - I want to know how cars work"
    when
        q : Question(content == "Oh yeah? Why's that?");
        a : UserAnswer(content == "I want to know how cars work");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Sounds good"));
        answers.add(new UserAnswer("More archaic"));
        answers.add(new UserAnswer("Not that archaic"));
        retract(a)
        retract(q)
        insert(new Question("So, something really simple?", answers, new ArrayList<Car>()));
end

rule "So, something really simple? - Sounds good"
    when
        q : Question(content == "So, something really simple?");
        a : UserAnswer(content == "Sounds good");
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Citroen 2CV"));
        cars.add(new Car("VW Thing"));
        cars.add(new Car("Willys Jeep"));
        cars.add(new Car("Honda Civic"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "So, something really simple? - More archaic"
    when
        q : Question(content.equals("So, something really simple?"));
        a : UserAnswer(content.equals("More archaic"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford model T"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "So, something really simple? - Not that archaic"
    when
        q : Question(content.equals("So, something really simple?"));
        a : UserAnswer(content.equals("Not that archaic"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford model A"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

// I guess I'm making some kind of statement about something? - branch 2/5

rule "Why do you want a classic? - I guess I'm making some kind of statement about something?"
    when
        q : Question(content.equals("Why do you want a classic?"));
        a : UserAnswer(content.equals("I guess I'm making some kind of statement about something?"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("I'm really rich but like to pretend I'm still a hippie"));
        answers.add(new UserAnswer("The mothership left me in Paris"));
        answers.add(new UserAnswer("I run an NYC-themed diner in Las Vegas"));
        answers.add(new UserAnswer("I live dangerously and Nader can suck it"));
        answers.add(new UserAnswer("I will only drive vehicles with two distinct luggage areas"));
        answers.add(new UserAnswer("I'm a kook. An american kook."));
        answers.add(new UserAnswer("I take driving seriously and have the gloves to prove it"));
        answers.add(new UserAnswer("My wallet is on a chain"));
        answers.add(new UserAnswer("I'm a refugee from an alternate future with zeppelins and shit"));
        answers.add(new UserAnswer("I like being part of a massive automotive subculture"));
        answers.add(new UserAnswer("I hate people knowing what i drive"));
        answers.add(new UserAnswer("I kinda wanted a motorcycle, but i have no balance"));
        retract(a)
        retract(q)
        insert(new Question("Great, what kind of statement?", answers, new ArrayList<Car>()));
end

rule "Great, what kind of statement? - I'm really rich but like to pretend I'm still a hippie"
when
    q : Question(content.equals("Great, what kind of statement?"));
    a : UserAnswer(content.equals("I'm really rich but like to pretend I'm still a hippie"));
then
    ArrayList<Car> cars = new ArrayList<>();
    cars.add(new Car("VW type 2 microbus"));
    retract(a)
    retract(q)
    insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - The mothership left me in Paris"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("The mothership left me in Paris"));
   then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Citroen SM"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I run an NYC-themed diner in Las Vegas"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I run an NYC-themed diner in Las Vegas"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Checker Marathon"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I live dangerously and Nader can suck it"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I live dangerously and Nader can suck it"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Chevy Corvair"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I will only drive vehicles with two distinct luggage areas"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I will only drive vehicles with two distinct luggage areas"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("No"));
        answers.add(new UserAnswer("Yes"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("VW type III"));
        retract(a)
        retract(q)
    insert(new Question("Something faster?", answers, cars));
end

rule "Something faster? - No"
    when
        q : Question(content.equals("Something faster?"));
        a : UserAnswer(content.equals("No"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("VW type III"));
        retract(a)
        retract(q)
    insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Something faster? - Yes"
    when
        q : Question(content.equals("Something faster?"));
        a : UserAnswer(content.equals("Yes"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("No"));
        answers.add(new UserAnswer("Yes"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Porsche 914"));
        retract(a)
        retract(q)
    insert(new Question("Even faster?", answers, cars));
end

rule "Even faster? - No"
    when
        q : Question(content.equals("Even faster?"));
        a : UserAnswer(content.equals("No"));
    then
        ArrayList<Car> cars = new ArrayList<>();
                cars.add(new Car("Porsche 914"));
        retract(a)
        retract(q)
    insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Even faster? - Yes"
    when
        q : Question(content.equals("Even faster?"));
        a : UserAnswer(content.equals("Yes"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("De Tomaso Mangusta"));
        retract(a)
        retract(q)
    insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I'm a kook. An american kook."
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I'm a kook. An american kook."));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("AMC AMX"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I take driving seriously and have the gloves to prove it"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I take driving seriously and have the gloves to prove it"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Porsche 911"));
    cars.add(new Car("BMW E30"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - My wallet is on a chain"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("My wallet is on a chain"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Yes"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford Falcon"));
        cars.add(new Car("Plymouth Valiant"));
        retract(a)
        retract(q)
        insert(new Question("Not for style, I'm tired of losing it", answers, cars));
end

rule "Not for style, I'm tired of losing it - Yes"
    when
        q : Question(content.equals("Not for style, I'm tired of losing it"));
        a : UserAnswer(content.equals("Yes"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Rambler American"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I'm a refugee from an alternate future with zeppelins and shit"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I'm a refugee from an alternate future with zeppelins and shit"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Tatra T87"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I like being part of a massive automotive subculture"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I like being part of a massive automotive subculture"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("VW Beetle"));
        cars.add(new Car("BMW 2002"));
        cars.add(new Car("MGB"));
        cars.add(new Car("Datsun 240Z"));
        cars.add(new Car("Volvo 240"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I hate people knowing what i drive"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I hate people knowing what i drive"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Sterling 825"));
        cars.add(new Car("Mitsubishi Starion"));
        cars.add(new Car("Isuzu I-Mark"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Great, what kind of statement? - I kinda wanted a motorcycle, but i have no balance"
    when
        q : Question(content.equals("Great, what kind of statement?"));
        a : UserAnswer(content.equals("I kinda wanted a motorcycle, but i have no balance"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Lotus 7"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

// New cars have no soul - branch 3/5

rule "Why do you want a classic? - New cars have no soul"
    when
        q : Question(content == "Why do you want a classic?");
        a : UserAnswer(content == "New cars have no soul");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Easy: ability to drive off a pier into an estuary"));
        answers.add(new UserAnswer("Synonym for weird"));
        answers.add(new UserAnswer("Technically novel"));
        answers.add(new UserAnswer("Soul means the car had an honest job, like a cop or cabbie"));
        answers.add(new UserAnswer("It means riding in it is like sitting on a sofa"));
        answers.add(new UserAnswer("It means the car is often starring in movies"));
        answers.add(new UserAnswer("It could mean pure evil?"));
        answers.add(new UserAnswer("Soul is the spirits of 43 dead clowns haunting the car"));
        answers.add(new UserAnswer("Soul is the ability to go a million miles with SU carbs and Lucas electrics"));
        retract(a)
        retract(q)
        insert(new Question("What does soul mean to you?", answers, new ArrayList<Car>()));
end

rule "What does soul mean to you? - Easy: ability to drive off a pier into an estuary"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Easy: ability to drive off a pier into an estuary"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Amphicar"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - Synonym for weird"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Synonym for weird"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("BMW Isetta"));
        cars.add(new Car("Messerschmidt Kabinroller"));
        cars.add(new Car("Subaru 360"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - Technically novel"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Technically novel"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Instead of pistons, some metal hamantaschen"));
        answers.add(new UserAnswer("Can burn cooking oil"));
        answers.add(new UserAnswer("Engine in the wrong place (maybe colled by wrong stuff)"));
        answers.add(new UserAnswer("They thought they were building a plane"));
        retract(a)
        retract(q)
        insert(new Question("Like what?", answers, new ArrayList<Car>()));
end

rule "Like what? - Instead of pistons, some metal hamantaschen"
    when
        q : Question(content.equals("Like what?"));
        a : UserAnswer(content.equals("Instead of pistons, some metal hamantaschen"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Mazdra RX-7"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Like what? - Can burn cooking oil"
    when
        q : Question(content.equals("Like what?"));
        a : UserAnswer(content.equals("Can burn cooking oil"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Mercedes Benz 300TD"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Like what? - Engine in the wrong place (maybe colled by wrong stuff)"
    when
        q : Question(content.equals("Like what?"));
        a : UserAnswer(content.equals("Engine in the wrong place (maybe colled by wrong stuff)"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Porsche 912"));
        cars.add(new Car("Renault Alpine"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Like what? - They thought they were building a plane"
    when
        q : Question(content.equals("Like what?"));
        a : UserAnswer(content.equals("They thought they were building a plane"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Saab 96"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - Soul means the car had an honest job, like a cop or cabbie"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Soul means the car had an honest job, like a cop or cabbie"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford Crown Vic"));
        cars.add(new Car("Dodge Monaco"));
        cars.add(new Car("Chevy Caprice"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - It means riding in it is like sitting on a sofa"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("It means riding in it is like sitting on a sofa"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Yes"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Lincoln Town Car"));
        retract(a)
        retract(q)
        insert(new Question("A huge, fast FWD sofa?", answers, cars));
end

rule "A huge, fast FWD sofa? - Yes"
    when
        q : Question(content.equals("A huge, fast FWD sofa?"));
        a : UserAnswer(content.equals("Yes"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Olds Tornado"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - It means the car is often starring in movies"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("It means the car is often starring in movies"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("VW Beetle"));
        cars.add(new Car("Delorean DMC-12"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - It could mean pure evil?"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("It could mean pure evil?"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Plymouth Fury"));
        cars.add(new Car("Buick GNX"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - Soul is the spirits of 43 dead clowns haunting the car"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Soul is the spirits of 43 dead clowns haunting the car"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Nash Metropolitan"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "What does soul mean to you? - Soul is the ability to go a million miles with SU carbs and Lucas electrics"
    when
        q : Question(content.equals("What does soul mean to you?"));
        a : UserAnswer(content.equals("Soul is the ability to go a million miles with SU carbs and Lucas electrics"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Volvo P1800"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

// I prefer the style - branch 4/5

rule "Why do you want a classic? - I prefer the style"
     when
         q : Question(content == "Why do you want a classic?");
         a : UserAnswer(content == "I prefer the style");
     then
         ArrayList<UserAnswer> answers = new ArrayList<>();
         answers.add(new UserAnswer("African dictator"));
         answers.add(new UserAnswer("I love corvairs but live in a 3/4 scale universe"));
         answers.add(new UserAnswer("Like Buick Roger's boss's dad"));
         answers.add(new UserAnswer("I love chrome and loud shirts"));
         answers.add(new UserAnswer("Really slow cars that look fast"));
         answers.add(new UserAnswer("I love brass and lanterns"));
         answers.add(new UserAnswer("I can only drive cars hat are museum-worthy"));
         answers.add(new UserAnswer("Working class hero, also beer"));
         answers.add(new UserAnswer("Old farmer with no family"));
         answers.add(new UserAnswer("Classic german with a touch of pedal confusion"));
         retract(a)
         retract(q)
         insert(new Question("OK, what kind of style?", answers, new ArrayList<Car>()));
     end

rule "OK, what kind of style? - African dictator"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("African dictator"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Mercedes-Benz 600"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - I love corvairs but live in a 3/4 scale universe"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("I love corvairs but live in a 3/4 scale universe"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("NSU Prinz"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - Like Buick Roger's boss's dad"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("Like Buick Roger's boss's dad"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("'59 Cadillac ElDorado"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - I love chrome and loud shirts"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("I love chrome and loud shirts"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("'57 Chevy Bel Air"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - Really slow cars that look fast"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("Really slow cars that look fast"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Opel GT"));
        cars.add(new Car("VW Karmann Ghia"));
        cars.add(new Car("Renault Floride"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - I love brass and lanterns"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("I love brass and lanterns"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Anything pre WW II"));
        cars.add(new Car("Maybe a Packard"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - I can only drive cars hat are museum-worthy"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("I can only drive cars hat are museum-worthy"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Citroen DS"));
        cars.add(new Car("Lamborghini Miura"));
        cars.add(new Car("Cord 812"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - Working class hero, also beer"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("Working class hero, also beer"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Noise and smoke"));
        answers.add(new UserAnswer("Noise, smoke and the Trailer park's undying respect"));
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford Mustang"));
        retract(a)
        retract(q)
        insert(new Question("What do you want from tires?", answers, cars));
end
rule "What do you want from tires? - Noise and smoke"
    when
        q : Question(content.equals("What do you want from tires?"));
        a : UserAnswer(content.equals("Noise and smoke"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ford Mustang Mach I"));
        cars.add(new Car("Chevy C3 Corvette"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "What do you want from tires? - Noise, smoke and the Trailer park's undying respect"
    when
        q : Question(content.equals("What do you want from tires?"));
        a : UserAnswer(content.equals("Noise, smoke and the Trailer park's undying respect"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Fox body Mustang"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - Old farmer with no family"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("Old farmer with no family"));
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Dammit, I lost my hat"));
        answers.add(new UserAnswer("So it does, friend"));
        retract(a)
        retract(q)
        insert(new Question("Does your hat say you'd rather push a chevy?", answers, new ArrayList<Car>()));
end
rule "Does your hat say you'd rather push a chevy? - Dammit, I lost my hat"
    when
        q : Question(content.equals("Does your hat say you'd rather push a chevy?"));
        a : UserAnswer(content.equals("Dammit, I lost my hat"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("AMC AMX"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "Does your hat say you'd rather push a chevy? - So it does, friend"
    when
        q : Question(content.equals("Does your hat say you'd rather push a chevy?"));
        a : UserAnswer(content.equals("So it does, friend"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Chevy Camaro"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "OK, what kind of style? - Classic german with a touch of pedal confusion"
    when
        q : Question(content.equals("OK, what kind of style?"));
        a : UserAnswer(content.equals("Classic german with a touch of pedal confusion"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Audi 100"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
// Love speed, hate safety  - branch 5/5

rule "Why do you want a classic? - Love speed, hate safety"
    when
        q : Question(content == "Why do you want a classic?");
        a : UserAnswer(content == "Love speed, hate safety");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("I love speed and money"));
        answers.add(new UserAnswer("I have a death wish"));
        answers.add(new UserAnswer("Fake is fine"));
        answers.add(new UserAnswer("Fast and cheap"));
        retract(a)
        retract(q)
        insert(new Question("Real speed or just feel speedy?", answers, new ArrayList<Car>()));
    end

rule "Real speed or just feel speedy? - I love speed and money"
    when
        q : Question(content == "Real speed or just feel speedy?");
        a : UserAnswer(content == "I love speed and money");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Some kind of duke and I rally"));
        answers.add(new UserAnswer("My goal is to drive my childhood bedroom posters"));
        answers.add(new UserAnswer("I have a weird fetish where I like people asking 'Is it a replica?'"));
        retract(a)
        retract(q)
        insert(new Question("Great, who are you?", answers, new ArrayList<Car>()));
    end

rule "Great, who are you? - Some kind of duke and I rally"
    when
        q : Question(content.equals("Great, who are you?"));
        a : UserAnswer(content.equals("Some kind of duke and I rally"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Lancia Stratos"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "Great, who are you? - My goal is to drive my childhood bedroom posters"
    when
        q : Question(content.equals("Great, who are you?"));
        a : UserAnswer(content.equals("My goal is to drive my childhood bedroom posters"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Lamborghini Countach"));
        cars.add(new Car("Ferrari 250 GTO"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "Great, who are you? - I have a weird fetish where I like people asking 'Is it a replica?'"
    when
        q : Question(content.equals("Great, who are you?"));
        a : UserAnswer(content.equals("I have a weird fetish where I like people asking 'Is it a replica?'"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("AC Cobra"));
        cars.add(new Car("Porsche 356 Speedster"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Real speed or just feel speedy? - I have a death wish"
    when
        q : Question(content == "Real speed or just feel speedy?");
        a : UserAnswer(content == "I have a death wish");
    then
        ArrayList<UserAnswer> answers = new ArrayList<>();
        answers.add(new UserAnswer("Crushed by V8 in tiny space"));
        answers.add(new UserAnswer("Run out of talent, off cliff"));
        answers.add(new UserAnswer("Car, tree"));
        answers.add(new UserAnswer("Blaze of glory"));
        answers.add(new UserAnswer("Electrocuted by wiper switch"));
        retract(a)
        retract(q)
        insert(new Question("How do you want to go?", answers, new ArrayList<Car>()));
end

rule "How do you want to go? - Crushed by V8 in tiny space"
    when
        q : Question(content.equals("How do you want to go?"));
        a : UserAnswer(content.equals("Crushed by V8 in tiny space"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Sunbeam Tiger"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "How do you want to go? - Run out of talent, off cliff"
    when
        q : Question(content.equals("How do you want to go?"));
        a : UserAnswer(content.equals("Run out of talent, off cliff"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Porsche Spyder"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "How do you want to go? - Car, tree"
    when
        q : Question(content.equals("How do you want to go?"));
        a : UserAnswer(content.equals("Car, tree"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Camaro IROC-Z"));
        cars.add(new Car("Plymouth Road Runner"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "How do you want to go? - Blaze of glory"
    when
        q : Question(content.equals("How do you want to go?"));
        a : UserAnswer(content.equals("Blaze of glory"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Ferrari Testarossa"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end
rule "How do you want to go? - Electrocuted by wiper switch"
    when
        q : Question(content.equals("How do you want to go?"));
        a : UserAnswer(content.equals("Electrocuted by wiper switch"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Jaguar E-TYPE"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Real speed or just feel speedy? - Fake is fine"
    when
        q : Question(content.equals("Real speed or just feel speedy?"));
        a : UserAnswer(content.equals("Fake is fine"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Datsun 510"));
        cars.add(new Car("Mini Cooper"));
        cars.add(new Car("Mk1 VW Golf GTI"));
        cars.add(new Car("Honda CRX"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end

rule "Real speed or just feel speedy? - Fast and cheap"
    when
        q : Question(content.equals("Real speed or just feel speedy?"));
        a : UserAnswer(content.equals("Fast and cheap"));
    then
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car("Dodge Omni GLH"));
        retract(a)
        retract(q)
        insert(new Question("", new ArrayList<UserAnswer>(), cars));
end